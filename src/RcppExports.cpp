// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// soda_main_allback
Rcpp::List soda_main_allback(const RcppGSL::Matrix& xx, const RcppGSL::Vector& yy, const CharacterVector& xnames, const std::vector<int>& fixset, bool norm, bool verbose, double gam, int minF0, bool allow_empty);
RcppExport SEXP _MTWAS_soda_main_allback(SEXP xxSEXP, SEXP yySEXP, SEXP xnamesSEXP, SEXP fixsetSEXP, SEXP normSEXP, SEXP verboseSEXP, SEXP gamSEXP, SEXP minF0SEXP, SEXP allow_emptySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const RcppGSL::Matrix& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const RcppGSL::Vector& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type xnames(xnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type fixset(fixsetSEXP);
    Rcpp::traits::input_parameter< bool >::type norm(normSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< double >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< int >::type minF0(minF0SEXP);
    Rcpp::traits::input_parameter< bool >::type allow_empty(allow_emptySEXP);
    rcpp_result_gen = Rcpp::wrap(soda_main_allback(xx, yy, xnames, fixset, norm, verbose, gam, minF0, allow_empty));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MTWAS_soda_main_allback", (DL_FUNC) &_MTWAS_soda_main_allback, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_MTWAS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
